// 获取css变量和值的mixin和functions
// $attr - attribute
// sass-lint:disable no-duplicate-properties
@import './semantic/helper';

// Colors
@function theme-rgb($cat, $attr) {
  $prefix: get-css-prefix();
  $css-var: #{$prefix}-#{get-css-var-name($cat, $attr)};

  @if is-old-version($cat, $attr) {
    $color: get-mapping-color($cat, $attr);
    $mapping-css-var: #{$prefix}-#{get-mapping-css-var($cat, $attr)};

    @return var($mapping-css-var, var($css-var, $color));
  }

  $color: get-new-color($cat, $attr);

  @return var($css-var, $color);
}

@function theme-rgba($cat, $attr, $opacity) {
  $prefix: get-css-prefix-rgb();
  $css-var: #{$prefix}-#{get-css-var-name($cat, $attr)};

  @if is-old-version($cat, $attr) {
    $color: get-mapping-color($cat, $attr);
    $mapping-css-var: #{$prefix}-#{get-mapping-css-var($cat, $attr)};
    $mixin-css-var: var($mapping-css-var, var($css-var, to-rgb($color)));

    // `unquote` is a workaround for node-sass misinterprets rgba as builtin function
    // https://github.com/sass/node-sass/issues/2251
    // dart-sass doesn't seem to have this issue.
    @return unquote('rgba(#{$mixin-css-var}, #{$opacity})');
  }

  $color: get-new-color($cat, $attr);

  @return unquote('rgba(#{var($css-var, to-rgb($color))}, #{$opacity})');
}

@mixin theme-color($prop, $cat, $color-attr, $opacity: 1) {
  $color: get-color($cat, $color-attr);

  @if $opacity >= 1 {
    #{$prop}: $color;
    #{$prop}: theme-rgb($cat, $color-attr);
  } @else {
    #{$prop}: rgba($color, $opacity);
    #{$prop}: theme-rgba($cat, $color-attr, $opacity);
  }
}

// Font
@mixin theme-font-weight($weight) {
  font-weight: map-get($font-weight, $weight);
  font-weight: get-font-weight-var($weight);
}

@mixin theme-font-size($size) {
  $font-size: map-get($font-size, $size);
  $font-size-var: get-font-size-var($size);

  font-size: $font-size;
  font-size: $font-size-var;
  line-height: map-get($line-height, $size);
  line-height: get-line-height-var($size);
}

@mixin theme-title-size($size) {
  @include theme-font-weight(medium);
  @include theme-font-size($size);
}

@mixin theme-normal-size($size) {
  @include theme-font-weight(normal);
  @include theme-font-size($size);
}

@mixin theme-font($size, $cat) {
  @if $cat == 'title' {
    @include theme-title-size($size);
  } @else {
    @include theme-normal-size($size);
  }
}

// Spacing
@mixin theme-spacing($prop, $size) {
  #{$prop}: map-get($spacing, $size);
  #{$prop}: get-spacing-var($size);
}

// Border
@mixin theme-radius($size: $absolute-size) {
  border-radius: get-border-radius-var($size);
}

@mixin theme-border-width($prop, $width: $absolute-size) {
  #{$prop}-width: map-get($border-width, $width);
  #{$prop}-width: get-border-width-var($width);
}

@mixin theme-border-impl($prop, $width, $style, $cat, $attr, $opacity) {
  #{$prop}-style: $style;

  @include theme-color(#{$prop}-color, $cat, $attr, $opacity: 1);

  @if map-get($border-width, $width) {
    @include theme-border-width($width);
  } @else {
    #{$prop}-width: $width;
  }
}

@mixin theme-border($width, $style, $cat, $i, $opacity: 1) {
  @include theme-border-impl(border, $width, $style, $cat, $i, $opacity);
}

@mixin theme-border-top($width, $style, $cat, $i, $opacity: 1) {
  @include theme-border-impl(border-top, $width, $style, $cat, $i, $opacity);
}

@mixin theme-border-right($width, $style, $cat, $i, $opacity: 1) {
  @include theme-border-impl(border-right, $width, $style, $cat, $i, $opacity);
}

@mixin theme-border-bottom($width, $style, $cat, $i, $opacity: 1) {
  @include theme-border-impl(border-bottom, $width, $style, $cat, $i, $opacity);
}

@mixin theme-border-left($width, $style, $cat, $i, $opacity: 1) {
  @include theme-border-impl(border-left, $width, $style, $cat, $i, $opacity);
}

// Shadow
$shadow-spec-focus: $shadow-size-focus rgba($shadow-color, 0.1) !default;
$shadow-spec-layer: $shadow-size-layer rgba($shadow-color, 0.1) !default;
$shadow-spec-modal: $shadow-size-modal rgba($shadow-color, 0.1) !default;

$shadow-spec-focus-var: $shadow-size-focus theme-rgba(section, shadow, 0.1) !default;
$shadow-spec-layer-var: $shadow-size-layer theme-rgba(section, shadow, 0.1) !default;
$shadow-spec-modal-var: $shadow-size-modal theme-rgba(section, shadow, 0.1) !default;

$theme-shadow: (
  'focus': $shadow-spec-focus,
  'layer': $shadow-spec-layer,
  'modal': $shadow-spec-modal,
);

$theme-shadow-var: (
  'focus': $shadow-spec-focus-var,
  'layer': $shadow-spec-layer-var,
  'modal': $shadow-spec-modal-var,
);

@mixin theme-shadow($cat) {
  $shadow: map-get($theme-shadow, $cat);
  $shadow-var: map-get($theme-shadow-var, $cat);

  box-shadow: $shadow;
  box-shadow: var(--shadow-spec-#{$cat}, $shadow-var);
}
